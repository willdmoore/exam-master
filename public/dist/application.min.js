"use strict";var ApplicationConfiguration=function(){var applicationModuleName="exammasterinteractive",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("activities"),ApplicationConfiguration.registerModule("assessments"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("questions"),ApplicationConfiguration.registerModule("responses"),ApplicationConfiguration.registerModule("users"),angular.module("activities").config(["$stateProvider",function($stateProvider){$stateProvider.state("listActivities",{url:"/activities",templateUrl:"modules/activities/views/list-activities.client.view.html"}).state("createActivity",{url:"/activities/create",templateUrl:"modules/activities/views/create-activity.client.view.html"}).state("viewActivity",{url:"/activities/:activityId",templateUrl:"modules/activities/views/view-activity.client.view.html"}).state("editActivity",{url:"/activities/:activityId/edit",templateUrl:"modules/activities/views/edit-activity.client.view.html"})}]),angular.module("activities").controller("ActivitiesController",["$scope","$stateParams","$location","Authentication","Activities",function($scope,$stateParams,$location,Authentication,Activities){$scope.authentication=Authentication,$scope.create=function(){var activity=new Activities({name:this.name});activity.$save(function(response){$location.path("activities/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(activity){if(activity){activity.$remove();for(var i in $scope.activities)$scope.activities[i]===activity&&$scope.activities.splice(i,1)}else $scope.activity.$remove(function(){$location.path("activities")})},$scope.update=function(){var activity=$scope.activity;activity.$update(function(){$location.path("activities/"+activity._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.activities=Activities.query()},$scope.findOne=function(){$scope.activity=Activities.get({activityId:$stateParams.activityId})}}]),angular.module("activities").factory("Activities",["$resource",function($resource){return $resource("activities/:activityId",{activityId:"@_id"},{update:{method:"PUT"}})}]),angular.module("assessments").config(["$stateProvider",function($stateProvider){$stateProvider.state("listAssessments",{url:"/assessments",templateUrl:"modules/assessments/views/list-assessments.client.view.html"}).state("createAssessment",{url:"/assessments/create",templateUrl:"modules/assessments/views/create-assessment.client.view.html"}).state("viewAssessment",{url:"/assessments/:assessmentId",templateUrl:"modules/assessments/views/view-assessment.client.view.html"}).state("editAssessment",{url:"/assessments/:assessmentId/edit",templateUrl:"modules/assessments/views/edit-assessment.client.view.html"})}]),angular.module("assessments").controller("AssessmentsController",["$scope","$stateParams","$location","Authentication","Assessments",function($scope,$stateParams,$location,Authentication,Assessments){$scope.authentication=Authentication,$scope.create=function(){var assessment=new Assessments({name:this.name});assessment.$save(function(response){$location.path("assessments/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(assessment){if(assessment){assessment.$remove();for(var i in $scope.assessments)$scope.assessments[i]===assessment&&$scope.assessments.splice(i,1)}else $scope.assessment.$remove(function(){$location.path("assessments")})},$scope.update=function(){var assessment=$scope.assessment;assessment.$update(function(){$location.path("assessments/"+assessment._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.assessments=Assessments.query()},$scope.findOne=function(){$scope.assessment=Assessments.get({assessmentId:$stateParams.assessmentId})}}]),angular.module("assessments").factory("Assessments",["$resource",function($resource){return $resource("assessments/:assessmentId",{assessmentId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("practice-examination-chapter",{url:"/practice-examination-chapter",templateUrl:"modules/core/views/practice-examination-chapter.client.view.html"}).state("practice-examination-results",{url:"/practice-examination-results",templateUrl:"modules/core/views/practice-examination-results.client.view.html"}).state("practice-examination",{url:"/practice-examination",templateUrl:"modules/core/views/practice-examination.client.view.html"}).state("information",{url:"/information",templateUrl:"modules/core/views/information.client.view.html"}).state("introduction",{url:"/introduction",templateUrl:"modules/core/views/introduction.client.view.html"}).state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").controller("InformationController",["$scope",function($scope){$scope.tabs=[{title:"Study Materials",active:!0,content:"STUDY MATERIALS:  Students preparing for the Pennsylvania Insurance Examination should have a current edition of the companion study manual Essentials of Property and Casual Insurance and a current edition of the Pennsylvania Licensing and Examination Insurance booklet.  The study manual Essentials of Property and Casual Insurance provides a complete analysis of the terms."},{title:"Exam Preparation",active:!1,content:"EXAM PREPARATION:  It is recommended that candidates structure their study time over several weeks allocating a specific time each day.  A 30-day programmed instructional guide is included in the study manual."},{title:"Licensing Manual",active:!1,content:"LICENSING MANUAL:  The study manual follows the exam outline.  It is recommended that you begin with chapter one, highlighting important terms and topics.  If you do not fully understand a discussion area, refer to the specimen policy forms located in the specimen page section of the manual."},{title:"Exam Master Software",active:!1,content:"EXAM MASTER SOFTWARE:  After reviewing a chapter in the manual, EXAM MASTER Interactive is the perfect complement to get you up to speed on key information.  The Chapter Preview feature includes over 450 PowerPoint audio slides.  Use this feature to give you a preview of the chapter."},{title:"I Am Ready",active:!1,content:"AM I READY:  This depends to a great extent on how well you've studied and how well you have monitored yourself.  You should not attempt to take your state exam until you have reviewed the study manual and completed it's exercises, reviewed the Flash Card exercises in this software and are consistently scoring 85% or greater in the test mode of EXAM MASTER INTERACTIVE.  Only then should you attempt to take your state exam."}]}]),angular.module("core").controller("IntroductionController",["$scope",function($scope){}]),angular.module("core").controller("PracticeExaminationChapterController",["$scope",function($scope){}]),angular.module("core").controller("PracticeExaminationController",["$scope","$location","Questions",function($scope,$location,Questions){var CHAPTER_1=1,CHAPTER_2=2,CHAPTER_3=3,CHAPTER_4=4,CHAPTER_5=5,CHAPTER_6=6,CHAPTER_7=7,CHAPTER_8=8,CHAPTER_9=9,CHAPTER_10=10,CHAPTERS=[CHAPTER_1,CHAPTER_2,CHAPTER_3,CHAPTER_4,CHAPTER_5,CHAPTER_6,CHAPTER_7,CHAPTER_8,CHAPTER_9,CHAPTER_10],MODE_PRACTICE=0,MODE_TEST=1,MODES=[MODE_PRACTICE,MODE_TEST];$scope.index=0,$scope.correct=0,$scope.answered=0,$scope.chapter=-1,$scope.mode=MODES[MODE_PRACTICE],$scope.questions=[],$scope.displayChapterExamination=function(chapter,mode){$scope.mode=MODES[mode],$scope.chapter=CHAPTERS[chapter],$scope.questions=Questions.findByChapter(CHAPTERS[chapter].toString())},$scope.checkAnswer=function(question_id,answer_id){var question=$scope.questions.filter(function(obj){return obj.id===question_id});question[0].correct_answer===answer_id?($scope.correct++,$scope.answered++,$scope.answered>=$scope.questions.length&&$location.path("practice-examination-results"),$scope.nextQuestion()):($scope.answered++,$scope.answered>=$scope.questions.length&&$location.path("practice-examination-results"),$scope.nextQuestion())},$scope.previousQuestion=function(){$scope.index--<0&&($scope.index=$scope.questions.length-1)},$scope.nextQuestion=function(){$scope.index++>=$scope.questions.length-1&&($scope.index=0)}}]),angular.module("core").controller("PracticeExamininationResultsController",["$scope",function($scope){}]),angular.module("core").filter("answersForQuestion",[function(){return function(input,id){return input.filter(function(obj){return obj.question_id===id})}}]),angular.module("core").filter("shuffle",[function(){return function(input){for(var j,x,i=input.length;i;j=parseInt(Math.random()*i),x=input[--i],input[i]=input[j],input[j]=x);return input.slice(0,3)}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("questions").config(["$stateProvider",function($stateProvider){$stateProvider.state("listQuestions",{url:"/questions",templateUrl:"modules/questions/views/list-questions.client.view.html"}).state("createQuestion",{url:"/questions/create",templateUrl:"modules/questions/views/create-question.client.view.html"}).state("viewQuestion",{url:"/questions/:questionId",templateUrl:"modules/questions/views/view-question.client.view.html"}).state("editQuestion",{url:"/questions/:questionId/edit",templateUrl:"modules/questions/views/edit-question.client.view.html"})}]),angular.module("questions").controller("QuestionsController",["$scope","$stateParams","$location","Authentication","Questions",function($scope,$stateParams,$location,Authentication,Questions){$scope.authentication=Authentication,$scope.create=function(){var question=new Questions({name:this.name});question.$save(function(response){$location.path("questions/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(question){if(question){question.$remove();for(var i in $scope.questions)$scope.questions[i]===question&&$scope.questions.splice(i,1)}else $scope.question.$remove(function(){$location.path("questions")})},$scope.update=function(){var question=$scope.question;question.$update(function(){$location.path("questions/"+question._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.questions=Questions.query()},$scope.findOne=function(){$scope.question=Questions.get({questionId:$stateParams.questionId})}}]),angular.module("questions").factory("Questions",["$resource",function($resource){return $resource("questions/:questionId",{questionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("responses").config(["$stateProvider",function($stateProvider){$stateProvider.state("listResponses",{url:"/responses",templateUrl:"modules/responses/views/list-responses.client.view.html"}).state("createResponse",{url:"/responses/create",templateUrl:"modules/responses/views/create-response.client.view.html"}).state("viewResponse",{url:"/responses/:responseId",templateUrl:"modules/responses/views/view-response.client.view.html"}).state("editResponse",{url:"/responses/:responseId/edit",templateUrl:"modules/responses/views/edit-response.client.view.html"})}]),angular.module("responses").controller("ResponsesController",["$scope","$stateParams","$location","Authentication","Responses",function($scope,$stateParams,$location,Authentication,Responses){$scope.authentication=Authentication,$scope.create=function(){var response=new Responses({name:this.name});response.$save(function(response){$location.path("responses/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(response){if(response){response.$remove();for(var i in $scope.responses)$scope.responses[i]===response&&$scope.responses.splice(i,1)}else $scope.response.$remove(function(){$location.path("responses")})},$scope.update=function(){var response=$scope.response;response.$update(function(){$location.path("responses/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.responses=Responses.query()},$scope.findOne=function(){$scope.response=Responses.get({responseId:$stateParams.responseId})}}]),angular.module("responses").factory("Responses",["$resource",function($resource){return $resource("responses/:responseId",{responseId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("dashboard",{url:"/dashboard",templateUrl:"modules/users/views/dashboard/dashboard.client.view.html"}).state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/dashboard")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("DashboardController",["$scope","Authentication","Activities",function($scope,Authentication,Activities){$scope.user=Authentication.user,$scope.activities=Activities.query()}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);